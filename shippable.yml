language: node_js

build:
  ci:
    - npm install
    - npm run-script lint

resources:
  - name: reqProc_sh_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: shippable/reqProc
      branch: master

  - name: u16reqProc_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/u16reqproc"
      versionName: master

  - name: u14reqProc_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/u14reqproc"
      versionName: master

  - name: macOS10reqProc_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/m10reqproc"
      versionName: master

  - name: u16reqProc_aarch64_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/aarch64_u16reqproc"
      versionName: master

  - name: u16reqProc_aarch32_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/aarch32_u16reqproc"
      versionName: master

  - name: w2k16reqProc_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/w16reqproc"
      versionName: master

jobs:
  - name: u16reqProc_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: reqProc_runCI
      - IN: u14_reqExec_x8664_pack
      - IN: u16_reqExec_x8664_pack
      - IN: c7_reqExec_x8664_pack
      - IN: macOS10_reqExec_x8664_pack
      - IN: u16_reqExec_aarch64_pack
      - IN: execTemplates_sh_repo
      - IN: u16microbase_dd_img
      - IN: reqProc_sh_repo
        switch: off
      - TASK:
          name: reqProc_build
          runtime:
            options:
              env:
                - IMG_OUT: "u16reqProc_dd_img"
                - IMG_BASE: "u16microbase_dd_img"
                - RES_REPO: "reqProc_sh_repo"
                - ARCHITECTURE: "x86_64"
                - OS: "Ubuntu_16.04"
          script:
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field "$IMG_OUT" "userName")
            - DH_PASS=$(shipctl get_integration_resource_field "$IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - sed -i "s/{{%TAG%}}/$REL_VER/g" ./image/$ARCHITECTURE/$OS/Dockerfile
            - docker build --no-cache -f ./image/$ARCHITECTURE/$OS/Dockerfile -t "$IMG_NAME:$REL_VER" .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16reqProc_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "IMG_COMMIT_SHA=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_COMMIT_SHA=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16reqProc_dd_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16reqProc_dd_img
        switch: off
      - TASK:
          name: u16reqproc_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16reqProc_dd_img"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u14reqProc_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: u14_cache_x86
    steps:
      - IN: reqProc_runCI
      - IN: u14_reqExec_x8664_pack
      - IN: u16_reqExec_x8664_pack
      - IN: c7_reqExec_x8664_pack
      - IN: macOS10_reqExec_x8664_pack
      - IN: u16_reqExec_aarch64_pack
      - IN: execTemplates_sh_repo
      - IN: u14microbase_dd_img
      - IN: reqProc_sh_repo
        switch: off
      - TASK:
          name: reqProc_build
          runtime:
            options:
              env:
                - IMG_OUT: "u14reqProc_dd_img"
                - IMG_BASE: "u14microbase_dd_img"
                - RES_REPO: "reqProc_sh_repo"
                - ARCHITECTURE: "x86_64"
                - OS: "Ubuntu_14.04"
          script:
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field "$IMG_OUT" "userName")
            - DH_PASS=$(shipctl get_integration_resource_field "$IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - sed -i "s/{{%TAG%}}/$REL_VER/g" ./image/$ARCHITECTURE/$OS/Dockerfile
            - docker build --no-cache -f ./image/$ARCHITECTURE/$OS/Dockerfile -t "$IMG_NAME:$REL_VER" .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u14reqProc_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "IMG_COMMIT_SHA=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_COMMIT_SHA=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u14reqProc_dd_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u14reqProc_dd_img
        switch: off
      - TASK:
          name: u14reqproc_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u14reqProc_dd_img"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: macOS10reqProc_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: mac10
      container: false
    steps:
      - IN: reqProc_runCI
      - IN: u14_reqExec_x8664_pack
      - IN: u16_reqExec_x8664_pack
      - IN: c7_reqExec_x8664_pack
      - IN: macOS10_reqExec_x8664_pack
      - IN: u16_reqExec_aarch64_pack
      - IN: execTemplates_sh_repo
      - IN: u16microbase_dd_img
      - IN: reqProc_sh_repo
        switch: off
      - TASK:
          name: reqProc_build
          runtime:
            options:
              env:
                - IMG_OUT: "macOS10reqProc_dd_img"
                - IMG_BASE: "u16microbase_dd_img"
                - RES_REPO: "reqProc_sh_repo"
                - ARCHITECTURE: "x86_64"
                - OS: "macOS_10.12"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field "$IMG_OUT" "userName")
            - DH_PASS=$(shipctl get_integration_resource_field "$IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - sed -i "" "s/{{%TAG%}}/$REL_VER/g" ./image/$ARCHITECTURE/$OS/Dockerfile
            - docker build --no-cache -f ./image/$ARCHITECTURE/$OS/Dockerfile -t "$IMG_NAME:$REL_VER" .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: macOS10reqProc_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: macOS10reqProc_dd_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: macOS10reqProc_dd_img
        switch: off
      - TASK:
          name: macOS10reqProc_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "macOS10reqProc_dd_img"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16reqProc_aarch64_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: aarch64_u1604_cus_01
      container: false
    steps:
      - IN: reqProc_runCI
      - IN: u14_reqExec_x8664_pack
      - IN: u16_reqExec_x8664_pack
      - IN: c7_reqExec_x8664_pack
      - IN: macOS10_reqExec_x8664_pack
      - IN: u16_reqExec_aarch64_pack
      - IN: execTemplates_sh_repo
      - IN: u16microbase_aarch64_dd_img
      - IN: reqProc_sh_repo
        switch: off
      - TASK:
          name: reqProc_build
          runtime:
            options:
              env:
                - IMG_OUT: "u16reqProc_aarch64_dd_img"
                - IMG_BASE: "u16microbase_aarch64_dd_img"
                - RES_REPO: "reqProc_sh_repo"
                - ARCHITECTURE: "aarch64"
                - OS: "Ubuntu_16.04"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field "$IMG_OUT" "userName")
            - DH_PASS=$(shipctl get_integration_resource_field "$IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - sed -i "s/{{%TAG%}}/$REL_VER/g" ./image/$ARCHITECTURE/$OS/Dockerfile
            - docker build --no-cache -f ./image/$ARCHITECTURE/$OS/Dockerfile -t "$IMG_NAME:$REL_VER" .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16reqProc_aarch64_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16reqProc_aarch64_dd_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16reqProc_aarch64_dd_img
        switch: off
      - TASK:
          name: u16reqProc_aarch64_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16reqProc_aarch64_dd_img"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16reqProc_aarch32_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: aarch32_u1604_cus_01
      container: false
    steps:
      - IN: reqProc_runCI
      - IN: u16_reqExec_aarch32_pack
      - IN: execTemplates_sh_repo
      - IN: u16microbase_aarch32_dd_img
      - IN: reqProc_sh_repo
        switch: off
      - TASK:
          name: u16reqProc_aarch32_build
          runtime:
            options:
              env:
                - IMG_OUT: "u16reqProc_aarch32_dd_img"
                - IMG_BASE: "u16microbase_aarch32_dd_img"
                - RES_REPO: "reqProc_sh_repo"
                - ARCHITECTURE: "aarch32"
                - OS: "Ubuntu_16.04"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field "$IMG_OUT" "userName")
            - DH_PASS=$(shipctl get_integration_resource_field "$IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - sed -i "s/{{%TAG%}}/$REL_VER/g" ./image/$ARCHITECTURE/$OS/Dockerfile
            - docker build --no-cache -f ./image/$ARCHITECTURE/$OS/Dockerfile -t "$IMG_NAME:$REL_VER" .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16reqProc_aarch32_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16reqProc_aarch32_dd_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16reqProc_aarch32_dd_img
        switch: off
      - TASK:
          name: u16reqProc_aarch32_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16reqProc_aarch32_dd_img"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"``

  - name: w2k16reqProc_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
      container: false
    steps:
      - IN: reqProc_runCI
      - IN: w2k16_reqExec_x8664_pack
      - IN: execTemplates_sh_repo
      - IN: reqProc_sh_repo
        switch: off
      - IN: node_sh_repo
        switch: off
      - TASK:
          name: reqProc_build
          runtime:
            options:
              env:
                - IMG_OUT: "w2k16reqProc_dd_img"
                - RES_REPO: "reqProc_sh_repo"
                - ARCHITECTURE: "x86_64"
                - OS: "WindowsServer_2016"
                - REL_VER: "master"
          script:
            - $script:RES_REPO_COMMIT=$(shipctl get_resource_version_key "$env:RES_REPO" "shaData.commitSha")
            - $script:IMG_NAME=$(shipctl get_resource_version_key "$env:IMG_OUT" "sourceName")
            - $script:DH_USR_NAME=$(shipctl get_integration_resource_field "$env:IMG_OUT" "userName")
            - $script:DH_PASS=$(shipctl get_integration_resource_field "$env:IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$env:RES_REPO")
            - |
              mkdir execTemplates;
              # TODO: Change this to use the actual packaged code from S3 once that job is fixed
              $script:EXECTEMPLATES_REPO_PATH = $(shipctl get_resource_state "execTemplates_sh_repo");
              Write-Output Copying execTemplates from $script:EXECTEMPLATES_REPO_PATH;
              cp -recurse ${script:EXECTEMPLATES_REPO_PATH}\* execTemplates;
            - |
              $script:REQEXEC_S3_BUCKET = $(shipctl get_resource_version_key w2k16_reqExec_x8664_pack S3_BUCKET);
              $script:REQEXEC_S3_FILENAME = $(shipctl get_resource_version_key w2k16_reqExec_x8664_pack S3_FILENAME);
              $script:REQEXEC_S3_FULL_PATH =  $script:REQEXEC_S3_BUCKET + $script:REQEXEC_S3_FILENAME;
              # Make this downloadable without aws cli dependency on the host
              $script:REQEXEC_S3_FULL_PATH = ($script:REQEXEC_S3_FULL_PATH).replace('s3://', 'https://s3.amazonaws.com/');
              Invoke-RestMethod $script:REQEXEC_S3_FULL_PATH -OutFile .\reqExecBin.zip;
              mkdir reqExec;
              Expand-Archive -Force .\reqExecBin.zip -DestinationPath .\reqExec;
              Remove-Item .\reqExecBin.zip;
            - |
              mkdir node
              $script:NODE_REPO_PATH = $(shipctl get_resource_state "node_sh_repo");
              cp -recurse ${script:NODE_REPO_PATH}\* node;
            - docker build --no-cache -f ./image/${env:ARCHITECTURE}/${env:OS}/Dockerfile -t "${IMG_NAME}:${env:REL_VER}" .
            - docker login -u "$DH_USR_NAME" -p "$DH_PASS"
            - docker push "${IMG_NAME}:${env:REL_VER}"
      - OUT: w2k16reqProc_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi "$env:JOB_NAME" "versionName=$env:REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$env:REL_VER"
        - shipctl put_resource_state_multi "$env:IMG_OUT" "versionName=$env:REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=${env:BUILD_NUMBER}" "IMG_NAME=$IMG_NAME" "IMG_TAG=$env:REL_VER"

  - name: w2k16reqProc_dd_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
      container: false
    steps:
      - IN: prod_release
      - IN: w2k16reqProc_dd_img
        switch: off
      - TASK:
          name: w16reqProc_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "w2k16reqProc_dd_img"
          script:
            - $script:REL_VER=$(shipctl get_resource_version_key "$env:RES_VER" "versionName")
            - |
               $script:REPO_COMMIT=$(shipctl get_resource_version_key "$env:RES_IMG" "IMG_REPO_COMMIT_SHA")
               $script:IMG_NAME=$(shipctl get_resource_version_key "$env:RES_IMG" "sourceName")
               $script:UP_IMG_TAG=$(shipctl get_resource_version_key "$env:RES_IMG" "versionName")
               $script:DH_USR_NAME=$(shipctl get_integration_resource_field "$env:RES_IMG" "userName")
               $script:DH_PASS=$(shipctl get_integration_resource_field "$env:RES_IMG" "password")
            - docker login -u "$DH_USR_NAME" -p "$DH_PASS"
            - docker pull "${IMG_NAME}:${UP_IMG_TAG}"
            - |
               docker tag "${IMG_NAME}:${UP_IMG_TAG}" "${IMG_NAME}:${REL_VER}"
               docker push "${IMG_NAME}:${REL_VER}"
            - |
               docker tag "${IMG_NAME}:${UP_IMG_TAG}" "${IMG_NAME}:latest"
               docker push "${IMG_NAME}:${REL_VER}"
    on_success:
      script:
        - shipctl put_resource_state_multi "$env:JOB_NAME" "versionName=${REL_VER}" "TAG_COMMIT_SHA=${REPO_COMMIT}" "TAG_IMG=${REL_VER}"

  - name: reqProc_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: reqProc_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: reqProc_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "reqProc_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/reqProc.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"
